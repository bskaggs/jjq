package com.github.bskaggs.jjq.jna;
import com.github.bskaggs.jjq.jna.jv.ByValue;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.PointerByReference;
/**
 * JNA Wrapper for library <b>jq</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface JqLibrary extends Library {
	/**
	 * <i>native declaration : src/main/c/jq.h</i><br>
	 * enum values
	 */
	public static interface jv_kind {
		/** <i>native declaration : src/main/c/jq.h:4</i> */
		public static final int JV_KIND_INVALID = 0;
		/** <i>native declaration : src/main/c/jq.h:5</i> */
		public static final int JV_KIND_NULL = 1;
		/** <i>native declaration : src/main/c/jq.h:6</i> */
		public static final int JV_KIND_FALSE = 2;
		/** <i>native declaration : src/main/c/jq.h:7</i> */
		public static final int JV_KIND_TRUE = 3;
		/** <i>native declaration : src/main/c/jq.h:8</i> */
		public static final int JV_KIND_NUMBER = 4;
		/** <i>native declaration : src/main/c/jq.h:9</i> */
		public static final int JV_KIND_STRING = 5;
		/** <i>native declaration : src/main/c/jq.h:10</i> */
		public static final int JV_KIND_ARRAY = 6;
		/** <i>native declaration : src/main/c/jq.h:11</i> */
		public static final int JV_KIND_OBJECT = 7;
	};
	/** <i>native declaration : src/main/c/jq.h</i> */
	public interface jq_msg_cb extends Callback {
		void apply(Pointer voidPtr1, ByValue jv1);
	};
	/**
	 * Original signature : <code>char* jv_string_value(jv)</code><br>
	 * <i>native declaration : src/main/c/jq.h:30</i>
	 */
	Pointer jv_string_value(ByValue jv1);
	/**
	 * Original signature : <code>jv_kind jv_get_kind(jv)</code><br>
	 * <i>native declaration : src/main/c/jq.h:31</i>
	 */
	int jv_get_kind(ByValue jv1);
	/**
	 * Original signature : <code>jv jv_dump_string(jv, int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:32</i>
	 */
	ByValue jv_dump_string(ByValue jv1, int flags);
	/**
	 * Original signature : <code>void jv_free(jv)</code><br>
	 * <i>native declaration : src/main/c/jq.h:33</i>
	 */
	void jv_free(ByValue jv1);
	/**
	 * Original signature : <code>jv jv_copy(jv)</code><br>
	 * <i>native declaration : src/main/c/jq.h:34</i>
	 */
	ByValue jv_copy(ByValue jv1);
	/**
	 * Original signature : <code>jv jv_invalid_get_msg(jv)</code><br>
	 * <i>native declaration : src/main/c/jq.h:35</i>
	 */
	ByValue jv_invalid_get_msg(ByValue jv1);
	/**
	 * Original signature : <code>int jv_invalid_has_msg(jv)</code><br>
	 * <i>native declaration : src/main/c/jq.h:36</i>
	 */
	int jv_invalid_has_msg(ByValue jv1);
	/**
	 * Original signature : <code>jv_parser* jv_parser_new(int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:40</i>
	 */
	PointerByReference jv_parser_new(int int1);
	/**
	 * Original signature : <code>void jv_parser_free(jv_parser*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:41</i><br>
	 * @deprecated use the safer method {@link #jv_parser_free(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void jv_parser_free(Pointer jv_parserPtr1);
	/**
	 * Original signature : <code>void jv_parser_free(jv_parser*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:41</i>
	 */
	void jv_parser_free(PointerByReference jv_parserPtr1);
	/**
	 * Original signature : <code>void jv_parser_set_buf(jv_parser*, const char*, int, int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:42</i><br>
	 * @deprecated use the safer methods {@link #jv_parser_set_buf(com.sun.jna.ptr.PointerByReference, java.lang.String, int, int)} and {@link #jv_parser_set_buf(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, int)} instead
	 */
	@Deprecated 
	void jv_parser_set_buf(Pointer jv_parserPtr1, Pointer charPtr1, int int1, int int2);
	/**
	 * Original signature : <code>void jv_parser_set_buf(jv_parser*, const char*, int, int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:42</i>
	 */
	void jv_parser_set_buf(PointerByReference jv_parserPtr1, String charPtr1, int int1, int int2);
	/**
	 * Original signature : <code>void jv_parser_set_buf(jv_parser*, const char*, int, int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:42</i>
	 */
	void jv_parser_set_buf(PointerByReference jv_parserPtr1, Pointer charPtr1, int int1, int int2);
	/**
	 * Original signature : <code>jv jv_parser_next(jv_parser*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:43</i><br>
	 * @deprecated use the safer method {@link #jv_parser_next(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	ByValue jv_parser_next(Pointer jv_parserPtr1);
	/**
	 * Original signature : <code>jv jv_parser_next(jv_parser*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:43</i>
	 */
	ByValue jv_parser_next(PointerByReference jv_parserPtr1);
	/**
	 * Original signature : <code>jq_state* jq_init()</code><br>
	 * <i>native declaration : src/main/c/jq.h:49</i>
	 */
	PointerByReference jq_init();
	/**
	 * Original signature : <code>void jq_teardown(jq_state**)</code><br>
	 * <i>native declaration : src/main/c/jq.h:50</i>
	 */
	void jq_teardown(PointerByReference jq_statePtrPtr1);
	/**
	 * Original signature : <code>void jq_set_error_cb(jq_state*, jq_msg_cb, void*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:51</i><br>
	 * @deprecated use the safer method {@link #jq_set_error_cb(com.sun.jna.ptr.PointerByReference, com.github.bskaggs.jjq.jna.JqLibrary.jq_msg_cb, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void jq_set_error_cb(Pointer jq_statePtr1, JqLibrary.jq_msg_cb jq_msg_cb1, Pointer voidPtr1);
	/**
	 * Original signature : <code>void jq_set_error_cb(jq_state*, jq_msg_cb, void*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:51</i>
	 */
	void jq_set_error_cb(PointerByReference jq_statePtr1, JqLibrary.jq_msg_cb jq_msg_cb1, Pointer voidPtr1);
	/**
	 * Original signature : <code>int jq_compile(jq_state*, const char*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:52</i><br>
	 * @deprecated use the safer methods {@link #jq_compile(com.sun.jna.ptr.PointerByReference, java.lang.String)} and {@link #jq_compile(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int jq_compile(Pointer jq_statePtr1, Pointer str);
	/**
	 * Original signature : <code>int jq_compile(jq_state*, const char*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:52</i>
	 */
	int jq_compile(PointerByReference jq_statePtr1, String str);
	/**
	 * Original signature : <code>int jq_compile(jq_state*, const char*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:52</i>
	 */
	int jq_compile(PointerByReference jq_statePtr1, Pointer str);
	/**
	 * Original signature : <code>void jq_start(jq_state*, jv, int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:53</i><br>
	 * @deprecated use the safer method {@link #jq_start(com.sun.jna.ptr.PointerByReference, com.github.bskaggs.jjq.jna.jv.ByValue, int)} instead
	 */
	@Deprecated 
	void jq_start(Pointer jq_statePtr1, ByValue value, int flags);
	/**
	 * Original signature : <code>void jq_start(jq_state*, jv, int)</code><br>
	 * <i>native declaration : src/main/c/jq.h:53</i>
	 */
	void jq_start(PointerByReference jq_statePtr1, ByValue value, int flags);
	/**
	 * Original signature : <code>jv jq_next(jq_state*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:54</i><br>
	 * @deprecated use the safer method {@link #jq_next(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	ByValue jq_next(Pointer jq_statePtr1);
	/**
	 * Original signature : <code>jv jq_next(jq_state*)</code><br>
	 * <i>native declaration : src/main/c/jq.h:54</i>
	 */
	ByValue jq_next(PointerByReference jq_statePtr1);
	public static class jv_parser extends PointerType {
		public jv_parser(Pointer address) {
			super(address);
		}
		public jv_parser() {
			super();
		}
	};
	public static class jq_state extends PointerType {
		public jq_state(Pointer address) {
			super(address);
		}
		public jq_state() {
			super();
		}
	};
}
